package kr.co.signallink.svsv2.model;

import android.content.Context;
import android.util.Log;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.Date;

import kr.co.signallink.svsv2.commons.DefConstant;
import kr.co.signallink.svsv2.server.SendPost;
import kr.co.signallink.svsv2.services.SendMessageHandler;
import kr.co.signallink.svsv2.utils.ToastUtil;
import kr.co.signallink.svsv2.utils.Utils;
import kr.co.signallink.svsv2.views.activities.PresetListActivity;

// Config File 저장용
//[StructLayout(LayoutKind.Sequential, Pack = 1)]
public class MainData {

    private static final String TAG = "MainData";

    Context context;
    public SendMessageHandler handler;

    public DIAGNOSIS_PRESETS_Type presetInfos;
    public DIAGNOSIS_CAUSES_Type causeInfos;
    public DIAGNOSIS_FEATURES_Type featureInfos;

    public VARIABLES_1_Type diagVar1;
    public VARIABLES_2_Type valueVar2, rangeVar2, lowerVar2, upperVar2;

    public DIAGNOSIS_DATA_Type diagData1;
    public DIAGNOSIS_DATA_Type diagData2;
    public DIAGNOSIS_DATA_Type diagData3;

    private String [][] cause;
    private String [][] feature;

    public boolean bExistCause = false;
    public boolean bExistFeature = false;
    public boolean bResponseCause = false;
    public boolean bResponseFeature = false;

    public MainData(Context context) {
        this.context = context;

        handler = new SendMessageHandler(this);

        presetInfos = new DIAGNOSIS_PRESETS_Type();
        presetInfos.infos = new PRESET_INFO_Type[Constants.MAX_PRESET];
        diagVar1 = new VARIABLES_1_Type();
        valueVar2 = new VARIABLES_2_Type();
        rangeVar2 = new VARIABLES_2_Type();
        lowerVar2 = new VARIABLES_2_Type();
        upperVar2 = new VARIABLES_2_Type();

        diagData1 = new DIAGNOSIS_DATA_Type();
        diagData2 = new DIAGNOSIS_DATA_Type();
        diagData3 = new DIAGNOSIS_DATA_Type();

        diagData1.dPwrSpectrum = new double[Constants.FREQ_ELE];
        diagData2.dPwrSpectrum = new double[Constants.FREQ_ELE];
        diagData3.dPwrSpectrum = new double[Constants.FREQ_ELE];

        MainForm_Load();
    }

    private void MainForm_Load() {
        // 엑셀 파일에 저장된 진단 설정 정보 가져오기
        fnInitDiagnosisVariables();

        // 설정한 Diagnosis 정보를 Variable 1으로 저장
        fnSetPreset2Variables();

        //main.fnGetPresetInfo();
        getCause();
        getFeature();
        //fnGetRawDatas();
    }

    public void fnInitDiagnosisVariables() {
        // Variable 2 초기화
        valueVar2.data = new float[Constants.FEATURE_COUNT];
        rangeVar2.data = new float[Constants.FEATURE_COUNT]; // %단위
        lowerVar2.data = new float[Constants.FEATURE_COUNT];
        upperVar2.data = new float[Constants.FEATURE_COUNT];

        rangeVar2.data[0] = 3; // 1x
        rangeVar2.data[1] = 3; // 2x
        rangeVar2.data[2] = 2; // 3x
        rangeVar2.data[3] = 2; // 4x
        rangeVar2.data[4] = 2; // 5x
        rangeVar2.data[5] = 1; // 6x
        rangeVar2.data[6] = 1; // 8x
        rangeVar2.data[7] = 1; // 9x
        rangeVar2.data[8] = 1; // 12x
        rangeVar2.data[9] = 10; // BPFO(%)
        rangeVar2.data[10] = 10; // BPFI(%)
        rangeVar2.data[11] = 10; // BSF(%)
        rangeVar2.data[12] = 10; // FTF(%)
        rangeVar2.data[13] = 2; // VPF
        rangeVar2.data[14] = 0.35f; // NoiseFloor1(%) : 1 ~ NoiseFloor1's Freq
        rangeVar2.data[15] = 0.35f; // NoiseFloor2(%) : NoiseFloor2's Freq ~ 1000
        rangeVar2.data[16] = 3; // 1/2x
        rangeVar2.data[17] = 3; // 1/3x
        rangeVar2.data[18] = 15; // 0.38~0.48x
        rangeVar2.data[19] = 1; // 2xLF
        rangeVar2.data[20] = 2; // LF
        rangeVar2.data[21] = 100; // Overall RMS
        rangeVar2.data[22] = 100; // Max Frequency
        rangeVar2.data[23] = 100; // Crest Factor
        rangeVar2.data[24] = 100; // Harmonic Sum
    }

    public void fnSetPreset2Variables() {
        try {
            // Variable 1 설정
            diagVar1.datetime = new Date();

            diagVar1.nCode = 1;
            diagVar1.nPrjVibSpec = 1;
            diagVar1.strSiteCode = "HDO";
            diagVar1.strEquipName = "Charge Pump";
            diagVar1.strTagNo = "PP-L25-51";
            diagVar1.nInputPower = 980;
            diagVar1.nLineFreq = 1;
            diagVar1.nEquipType = 0;
            diagVar1.nRPM = 3579;
            diagVar1.nBladeCount = 5;
            diagVar1.nBearingType = 3;
            diagVar1.nBallCount = 0;
            diagVar1.nPitchDiameter = 0;
            diagVar1.nBallDiameter = 0;
            diagVar1.nRPS = 0;
            diagVar1.nContactAngle = 0;

            // Variable 2 설정
            valueVar2.data = new float[Constants.FEATURE_COUNT];
            valueVar2.data[0] = (float) diagVar1.nRPM / 60;
            valueVar2.data[1] = Utils.floatFloor((float) valueVar2.data[0] * 2);
            valueVar2.data[2] = Utils.floatFloor(valueVar2.data[0] * 3);
            valueVar2.data[3] = Utils.floatFloor(valueVar2.data[0] * 4);
            valueVar2.data[4] = Utils.floatFloor(valueVar2.data[0] * 5);
            valueVar2.data[5] = Utils.floatFloor(valueVar2.data[0] * 6);
            valueVar2.data[6] = Utils.floatFloor(valueVar2.data[0] * 8);
            valueVar2.data[7] = Utils.floatFloor(valueVar2.data[0] * 9);
            valueVar2.data[8] = Utils.floatFloor(valueVar2.data[0] * 12);
            valueVar2.data[9] = 0; // BPFO
            valueVar2.data[10] = 0; // BPFI
            valueVar2.data[11] = 0; // BSF
            valueVar2.data[12] = 0; // FTF
            valueVar2.data[13] = Utils.floatFloor(diagVar1.nBladeCount * diagVar1.nRPM / 60); // VSF : RPM * Blade 수 / 60
            valueVar2.data[14] = Utils.floatFloor((float) 10 * valueVar2.data[0]); // Noise Floor 1
            valueVar2.data[15] = Utils.floatFloor((float) 10 * valueVar2.data[0]); // Noise Floor 2
            valueVar2.data[16] = valueVar2.data[0] / 2;
            valueVar2.data[17] = valueVar2.data[0] / 3;
            valueVar2.data[18] = Utils.floatFloor((float) (diagVar1.nRPM / 60 * (0.38 + 0.48) / 2)); // 0.38 ~ 0.48X : RPM / 60 * (0.38 +
                                                                                   // 0.48) / 2
            valueVar2.data[20] = (diagVar1.nLineFreq == 0) ? 50 : 60; // LF
            valueVar2.data[19] = Utils.floatFloor(valueVar2.data[20] * 2); // 2x LF
            valueVar2.data[21] = 500; // Overall RMS
            valueVar2.data[22] = 500; // Frequency MAX
            valueVar2.data[23] = 0; // Crest Factor
            valueVar2.data[24] = 0; // Harmonic Sum
        } catch (Exception ex) {
            System.out.println("[Exception: fnSetPreset2Variable1] " + ex.getMessage());
        }
    }

    public DIAGNOSIS_DATA_Type[] fnGetRawDatas() {
        DIAGNOSIS_DATA_Type[] returnValue = new DIAGNOSIS_DATA_Type[3];
        DIAGNOSIS_DATA_Type testData1 = new DIAGNOSIS_DATA_Type();
        DIAGNOSIS_DATA_Type testData2 = new DIAGNOSIS_DATA_Type();
        DIAGNOSIS_DATA_Type testData3 = new DIAGNOSIS_DATA_Type();

        returnValue[0] = testData1;
        returnValue[1] = testData2;
        returnValue[2] = testData3;

        // final int nRows = 512;
        // testData1.dFreq = new double[nRows];
        // testData1.dPwrSpectrum = new double[nRows];
        // testData2.dFreq = new double[nRows];
        // testData2.dPwrSpectrum = new double[nRows];
        // testData3.dFreq = new double[nRows];
        // testData3.dPwrSpectrum = new double[nRows];
        // 1. 각 측정 Raw 데이터별 MATRIX 2 추출
        testData1.fSamplingRate = (float) 1.338975e+03;
        testData2.fSamplingRate = (float) 1.386214e+03;
        testData3.fSamplingRate = (float) 1.384258e+03;

        try {
            testData1.dFreq = new double[] { 0, 1.308, 2.615, 3.923, 5.23, 6.538, 7.846, 9.153, 10.461, 11.768, 13.076,
                    14.384, 15.691, 16.999, 18.306, 19.614, 20.921, 22.229, 23.537, 24.844, 26.152, 27.459, 28.767,
                    30.075, 31.382, 32.69, 33.997, 35.305, 36.613, 37.92, 39.228, 40.535, 41.843, 43.151, 44.458,
                    45.766, 47.073, 48.381, 49.689, 50.996, 52.304, 53.611, 54.919, 56.227, 57.534, 58.842, 60.149,
                    61.457, 62.764, 64.072, 65.38, 66.687, 67.995, 69.302, 70.61, 71.918, 73.225, 74.533, 75.84, 77.148,
                    78.456, 79.763, 81.071, 82.378, 83.686, 84.994, 86.301, 87.609, 88.916, 90.224, 91.532, 92.839,
                    94.147, 95.454, 96.762, 98.069, 99.377, 100.685, 101.992, 103.3, 104.607, 105.915, 107.223, 108.53,
                    109.838, 111.145, 112.453, 113.761, 115.068, 116.376, 117.683, 118.991, 120.299, 121.606, 122.914,
                    124.221, 125.529, 126.837, 128.144, 129.452, 130.759, 132.067, 133.375, 134.682, 135.99, 137.297,
                    138.605, 139.912, 141.22, 142.528, 143.835, 145.143, 146.45, 147.758, 149.066, 150.373, 151.681,
                    152.988, 154.296, 155.604, 156.911, 158.219, 159.526, 160.834, 162.142, 163.449, 164.757, 166.064,
                    167.372, 168.68, 169.987, 171.295, 172.602, 173.91, 175.217, 176.525, 177.833, 179.14, 180.448,
                    181.755, 183.063, 184.371, 185.678, 186.986, 188.293, 189.601, 190.909, 192.216, 193.524, 194.831,
                    196.139, 197.447, 198.754, 200.062, 201.369, 202.677, 203.985, 205.292, 206.6, 207.907, 209.215,
                    210.523, 211.83, 213.138, 214.445, 215.753, 217.06, 218.368, 219.676, 220.983, 222.291, 223.598,
                    224.906, 226.214, 227.521, 228.829, 230.136, 231.444, 232.752, 234.059, 235.367, 236.674, 237.982,
                    239.29, 240.597, 241.905, 243.212, 244.52, 245.828, 247.135, 248.443, 249.75, 251.058, 252.365,
                    253.673, 254.981, 256.288, 257.596, 258.903, 260.211, 261.519, 262.826, 264.134, 265.441, 266.749,
                    268.057, 269.364, 270.672, 271.979, 273.287, 274.595, 275.902, 277.21, 278.517, 279.825, 281.133,
                    282.44, 283.748, 285.055, 286.363, 287.671, 288.978, 290.286, 291.593, 292.901, 294.208, 295.516,
                    296.824, 298.131, 299.439, 300.746, 302.054, 303.362, 304.669, 305.977, 307.284, 308.592, 309.9,
                    311.207, 312.515, 313.822, 315.13, 316.438, 317.745, 319.053, 320.36, 321.668, 322.976, 324.283,
                    325.591, 326.898, 328.206, 329.513, 330.821, 332.129, 333.436, 334.744, 336.051, 337.359, 338.667,
                    339.974, 341.282, 342.589, 343.897, 345.205, 346.512, 347.82, 349.127, 350.435, 351.743, 353.05,
                    354.358, 355.665, 356.973, 358.281, 359.588, 360.896, 362.203, 363.511, 364.819, 366.126, 367.434,
                    368.741, 370.049, 371.356, 372.664, 373.972, 375.279, 376.587, 377.894, 379.202, 380.51, 381.817,
                    383.125, 384.432, 385.74, 387.048, 388.355, 389.663, 390.97, 392.278, 393.586, 394.893, 396.201,
                    397.508, 398.816, 400.124, 401.431, 402.739, 404.046, 405.354, 406.661, 407.969, 409.277, 410.584,
                    411.892, 413.199, 414.507, 415.815, 417.122, 418.43, 419.737, 421.045, 422.353, 423.66, 424.968,
                    426.275, 427.583, 428.891, 430.198, 431.506, 432.813, 434.121, 435.429, 436.736, 438.044, 439.351,
                    440.659, 441.967, 443.274, 444.582, 445.889, 447.197, 448.504, 449.812, 451.12, 452.427, 453.735,
                    455.042, 456.35, 457.658, 458.965, 460.273, 461.58, 462.888, 464.196, 465.503, 466.811, 468.118,
                    469.426, 470.734, 472.041, 473.349, 474.656, 475.964, 477.272, 478.579, 479.887, 481.194, 482.502,
                    483.809, 485.117, 486.425, 487.732, 489.04, 490.347, 491.655, 492.963, 494.27, 495.578, 496.885,
                    498.193, 499.501, 500.808, 502.116, 503.423, 504.731, 506.039, 507.346, 508.654, 509.961, 511.269,
                    512.577, 513.884, 515.192, 516.499, 517.807, 519.115, 520.422, 521.73, 523.037, 524.345, 525.652,
                    526.96, 528.268, 529.575, 530.883, 532.19, 533.498, 534.806, 536.113, 537.421, 538.728, 540.036,
                    541.344, 542.651, 543.959, 545.266, 546.574, 547.882, 549.189, 550.497, 551.804, 553.112, 554.42,
                    555.727, 557.035, 558.342, 559.65, 560.957, 562.265, 563.573, 564.88, 566.188, 567.495, 568.803,
                    570.111, 571.418, 572.726, 574.033, 575.341, 576.649, 577.956, 579.264, 580.571, 581.879, 583.187,
                    584.494, 585.802, 587.109, 588.417, 589.725, 591.032, 592.34, 593.647, 594.955, 596.263, 597.57,
                    598.878, 600.185, 601.493, 602.8, 604.108, 605.416, 606.723, 608.031, 609.338, 610.646, 611.954,
                    613.261, 614.569, 615.876, 617.184, 618.492, 619.799, 621.107, 622.414, 623.722, 625.03, 626.337,
                    627.645, 628.952, 630.26, 631.568, 632.875, 634.183, 635.49, 636.798, 638.105, 639.413, 640.721,
                    642.028, 643.336, 644.643, 645.951, 647.259, 648.566, 649.874, 651.181, 652.489, 653.797, 655.104,
                    656.412, 657.719, 659.027, 660.335, 661.642, 662.95, 664.257, 665.565, 666.873, 668.18 };
            testData1.dPwrSpectrum = new double[] { 0.000208686, 0.000471689, 0.000449743, 0.001020944, 0.002081964,
                    0.00182562, 0.001762248, 0.001869144, 0.001337251, 0.000397722, 0.001159656, 0.002647877,
                    0.002949852, 0.001531561, 0.002846374, 0.003003319, 0.001624187, 0.001755621, 0.002232957,
                    0.001617841, 0.002062181, 0.00343627, 0.003103923, 0.001332508, 0.001551538, 0.0004314, 0.00158754,
                    0.002227092, 0.002897066, 0.002933767, 0.002412177, 0.002300189, 0.000512522, 0.002186567,
                    0.001984658, 0.000743136, 0.004430229, 0.003380344, 0.00352809, 0.003860825, 0.001280377,
                    0.002163626, 0.001900871, 0.001685694, 0.003644668, 0.003677658, 0.004880645, 0.006986425,
                    0.008067434, 0.006638501, 0.005036613, 0.005479037, 0.005028892, 0.003013846, 0.001093358,
                    0.000230305, 0.001829655, 0.00229503, 0.003920218, 0.005679036, 0.004071094, 0.002566598,
                    0.002363516, 0.003347511, 0.002852393, 0.005375707, 0.003750146, 0.002403904, 0.003501152,
                    0.01448546, 0.009435629, 0.00424895, 0.002549261, 0.004255559, 0.006483696, 0.004691783,
                    0.001906141, 0.000633371, 0.001937159, 0.003056125, 0.001457959, 0.00381829, 0.002913015,
                    0.004350479, 0.006013065, 0.003135296, 0.001103168, 0.003755694, 0.006200728, 0.003729866,
                    0.00218085, 0.01773247, 0.03492659, 0.01618451, 0.000653336, 0.001026193, 0.002689168, 0.004298285,
                    0.004442353, 0.002367001, 0.003702548, 0.003254161, 0.001672311, 0.001342074, 0.002613646,
                    0.004076275, 0.004565579, 0.005039105, 0.004135806, 0.002115599, 0.000613421, 0.000743793,
                    0.002613938, 0.004173426, 0.006338459, 0.01123944, 0.007021243, 0.001606407, 0.002923642,
                    0.002151112, 0.003429811, 0.002070363, 0.003202375, 0.002003721, 0.003104793, 0.002947236,
                    0.005815672, 0.01036951, 0.004083614, 0.004117927, 0.004312578, 0.002101169, 0.000660623,
                    0.001743325, 0.001061199, 0.001564794, 0.002690762, 0.004764043, 0.01015894, 0.00983481,
                    0.004932786, 0.000375926, 0.002419199, 0.003544178, 0.001700546, 0.000133186, 0.001794177,
                    0.000961484, 0.001994683, 0.00324908, 0.001674106, 0.002650777, 0.004672516, 0.00490807,
                    0.003672957, 0.001221874, 0.00494529, 0.007991605, 0.004344556, 0.001021071, 0.003482267,
                    0.004816676, 0.003205698, 0.002935933, 0.001932835, 0.002144292, 0.002913564, 0.001185049,
                    0.003757339, 0.006954487, 0.006041689, 0.003312341, 0.004121667, 0.006576873, 0.003442983,
                    0.001035272, 0.002785488, 0.006526348, 0.004381438, 0.002712865, 0.0058191, 0.002962821,
                    0.003346522, 0.007983289, 0.02991924, 0.03444766, 0.01191831, 0.001192075, 0.003962021, 0.003001272,
                    0.006485617, 0.01232501, 0.007855915, 0.002084434, 0.002728013, 0.009518463, 0.02038777, 0.01178804,
                    0.000624883, 0.006831176, 0.006389583, 0.006638196, 0.008356894, 0.009781175, 0.009117621,
                    0.007319844, 0.00537097, 0.008633734, 0.006581819, 0.002405921, 0.00467235, 0.004317566,
                    0.006604331, 0.007086928, 0.00397229, 0.002169014, 0.003606016, 0.0021899, 0.01593687, 0.03336881,
                    0.02017727, 0.001952573, 0.002916923, 0.003371529, 0.002918894, 0.002960357, 0.002183854,
                    0.002192913, 0.003953301, 0.009936665, 0.02054739, 0.02565073, 0.007858037, 0.003073066,
                    0.001990245, 0.003508331, 0.004259508, 0.005252216, 0.001427762, 0.001761827, 0.001566657,
                    0.006682863, 0.01260846, 0.01066583, 0.005627242, 0.003163597, 0.000662577, 0.000735938,
                    0.002400361, 0.002725482, 0.000759631, 0.001880297, 0.003633092, 0.003172489, 0.004838136,
                    0.00583896, 0.005426794, 0.00487386, 0.001269528, 0.001858428, 0.002414991, 0.002039047,
                    0.001517168, 0.001469493, 0.001312024, 0.001370276, 0.001800881, 0.002455979, 0.00557039,
                    0.00457118, 0.004720615, 0.003218107, 0.001071373, 0.005046309, 0.005290818, 0.00379629,
                    0.003125869, 0.000134929, 0.001660525, 0.003536292, 0.002682949, 0.002176893, 0.004367215,
                    0.002717339, 0.00234481, 0.002767301, 0.002609868, 0.003945103, 0.006013137, 0.00520496,
                    0.004019336, 0.003446192, 0.003769998, 0.006290659, 0.002487981, 0.000226154, 0.00337768,
                    0.003220824, 0.007437259, 0.01035495, 0.004925058, 0.002257648, 0.002591119, 0.002315372,
                    0.004244373, 0.004072682, 0.003451561, 0.002804375, 0.002862952, 0.001923249, 0.000630609,
                    0.002892521, 0.002400575, 0.001292359, 0.004599466, 0.003896872, 0.002730217, 0.00286146,
                    0.003983138, 0.004288148, 0.003676104, 0.000441238, 0.002821924, 0.00109303, 0.00473085,
                    0.006737304, 0.005190127, 0.004157705, 0.004732538, 0.005353808, 0.00484361, 0.00389281, 0.00270861,
                    0.004093171, 0.005682501, 0.003660363, 0.001393949, 0.002810249, 0.002421166, 0.000342635,
                    0.002341945, 0.000655349, 0.000675448, 0.001552677, 0.001048176, 0.000931694, 0.001838664,
                    0.00140782, 0.00387283, 0.004108487, 0.002170591, 0.000509818, 0.002022027, 0.00434168, 0.004568878,
                    0.003754676, 0.00151583, 0.000710009, 0.002968729, 0.005335587, 0.00358403, 0.000292881,
                    0.002975008, 0.004716984, 0.003399231, 0.003027244, 0.002897178, 0.003888812, 0.002076509,
                    0.005052947, 0.007195425, 0.003389817, 0.002210095, 0.003162938, 0.003110733, 0.005551558,
                    0.002983361, 0.002399719, 0.002149918, 0.000223585, 0.001597094, 0.006458557, 0.00761668,
                    0.003491916, 0.000540925, 0.002042848, 0.006072972, 0.006193689, 0.002174185, 0.001414976,
                    0.001504995, 0.002242382, 0.002311542, 0.00420385, 0.004361075, 0.001205064, 0.00093375,
                    0.002051084, 0.002350784, 0.001163087, 0.001640495, 0.005266528, 0.005216703, 0.003362158,
                    0.003391256, 0.002958628, 0.001204457, 0.003515716, 0.002838205, 0.000922806, 0.000448518,
                    0.002101177, 0.005013533, 0.004128674, 0.004127009, 0.003067269, 0.002710044, 0.001704441,
                    0.002259696, 0.002690185, 0.001659793, 0.003131232, 0.004974831, 0.001221474, 0.002224534,
                    0.001616903, 0.001970998, 0.002071649, 0.001518765, 0.003254608, 0.005918652, 0.005767954,
                    0.004434661, 0.00356906, 0.003284753, 0.004668967, 0.004299486, 0.001898693, 0.002784808,
                    0.003778518, 0.003101457, 0.002914382, 0.002876286, 0.002753921, 0.004450212, 0.001643377,
                    0.002867058, 0.001750962, 0.000605498, 0.001226925, 0.005042979, 0.006723899, 0.00491387,
                    0.004082427, 0.001844898, 0.00414276, 0.003775423, 0.001560336, 0.005551554, 0.005758449,
                    0.002482667, 0.001220285, 0.002652316, 0.004798876, 0.007331944, 0.007195893, 0.004791283,
                    0.001208548, 0.002228963, 0.001544231, 0.000549756, 0.001725645, 0.001688919, 0.001271777,
                    0.004052664, 0.004441502, 0.005223251, 0.006186598, 0.003092239, 0.002791132, 0.006026005,
                    0.004811397, 0.002070588, 0.002979883, 0.002763568, 0.00075378, 0.00085455, 0.004265384,
                    0.005823838, 0.002996958, 0.000678764, 0.001814383, 0.00203469, 0.001292876, 0.004125286,
                    0.004489615, 0.003509494, 0.003185155, 0.003679226, 0.004005464, 0.003190773, 0.00198189,
                    0.003286904, 0.004646095, 0.004522802, 0.001282173, 0.001390842, 0.002711787, 0.001816657,
                    0.003317281, 0.002965211, 0.001887646 };

            testData2.dFreq = new double[] { 0, 1.354, 2.707, 4.061, 5.415, 6.769, 8.122, 9.476, 10.83, 12.184, 13.537,
                    14.891, 16.245, 17.598, 18.952, 20.306, 21.66, 23.013, 24.367, 25.721, 27.074, 28.428, 29.782,
                    31.136, 32.489, 33.843, 35.197, 36.551, 37.904, 39.258, 40.612, 41.965, 43.319, 44.673, 46.027,
                    47.38, 48.734, 50.088, 51.442, 52.795, 54.149, 55.503, 56.856, 58.21, 59.564, 60.918, 62.271,
                    63.625, 64.979, 66.333, 67.686, 69.04, 70.394, 71.747, 73.101, 74.455, 75.809, 77.162, 78.516,
                    79.87, 81.223, 82.577, 83.931, 85.285, 86.638, 87.992, 89.346, 90.7, 92.053, 93.407, 94.761, 96.114,
                    97.468, 98.822, 100.176, 101.529, 102.883, 104.237, 105.591, 106.944, 108.298, 109.652, 111.005,
                    112.359, 113.713, 115.067, 116.42, 117.774, 119.128, 120.482, 121.835, 123.189, 124.543, 125.896,
                    127.25, 128.604, 129.958, 131.311, 132.665, 134.019, 135.372, 136.726, 138.08, 139.434, 140.787,
                    142.141, 143.495, 144.849, 146.202, 147.556, 148.91, 150.263, 151.617, 152.971, 154.325, 155.678,
                    157.032, 158.386, 159.74, 161.093, 162.447, 163.801, 165.154, 166.508, 167.862, 169.216, 170.569,
                    171.923, 173.277, 174.631, 175.984, 177.338, 178.692, 180.045, 181.399, 182.753, 184.107, 185.46,
                    186.814, 188.168, 189.521, 190.875, 192.229, 193.583, 194.936, 196.29, 197.644, 198.998, 200.351,
                    201.705, 203.059, 204.412, 205.766, 207.12, 208.474, 209.827, 211.181, 212.535, 213.889, 215.242,
                    216.596, 217.95, 219.303, 220.657, 222.011, 223.365, 224.718, 226.072, 227.426, 228.779, 230.133,
                    231.487, 232.841, 234.194, 235.548, 236.902, 238.256, 239.609, 240.963, 242.317, 243.67, 245.024,
                    246.378, 247.732, 249.085, 250.439, 251.793, 253.147, 254.5, 255.854, 257.208, 258.561, 259.915,
                    261.269, 262.623, 263.976, 265.33, 266.684, 268.038, 269.391, 270.745, 272.099, 273.452, 274.806,
                    276.16, 277.514, 278.867, 280.221, 281.575, 282.928, 284.282, 285.636, 286.99, 288.343, 289.697,
                    291.051, 292.405, 293.758, 295.112, 296.466, 297.819, 299.173, 300.527, 301.881, 303.234, 304.588,
                    305.942, 307.296, 308.649, 310.003, 311.357, 312.71, 314.064, 315.418, 316.772, 318.125, 319.479,
                    320.833, 322.187, 323.54, 324.894, 326.248, 327.601, 328.955, 330.309, 331.663, 333.016, 334.37,
                    335.724, 337.077, 338.431, 339.785, 341.139, 342.492, 343.846, 345.2, 346.554, 347.907, 349.261,
                    350.615, 351.968, 353.322, 354.676, 356.03, 357.383, 358.737, 360.091, 361.445, 362.798, 364.152,
                    365.506, 366.859, 368.213, 369.567, 370.921, 372.274, 373.628, 374.982, 376.336, 377.689, 379.043,
                    380.397, 381.75, 383.104, 384.458, 385.812, 387.165, 388.519, 389.873, 391.226, 392.58, 393.934,
                    395.288, 396.641, 397.995, 399.349, 400.703, 402.056, 403.41, 404.764, 406.117, 407.471, 408.825,
                    410.179, 411.532, 412.886, 414.24, 415.594, 416.947, 418.301, 419.655, 421.008, 422.362, 423.716,
                    425.07, 426.423, 427.777, 429.131, 430.484, 431.838, 433.192, 434.546, 435.899, 437.253, 438.607,
                    439.961, 441.314, 442.668, 444.022, 445.375, 446.729, 448.083, 449.437, 450.79, 452.144, 453.498,
                    454.852, 456.205, 457.559, 458.913, 460.266, 461.62, 462.974, 464.328, 465.681, 467.035, 468.389,
                    469.743, 471.096, 472.45, 473.804, 475.157, 476.511, 477.865, 479.219, 480.572, 481.926, 483.28,
                    484.633, 485.987, 487.341, 488.695, 490.048, 491.402, 492.756, 494.11, 495.463, 496.817, 498.171,
                    499.524, 500.878, 502.232, 503.586, 504.939, 506.293, 507.647, 509.001, 510.354, 511.708, 513.062,
                    514.415, 515.769, 517.123, 518.477, 519.83, 521.184, 522.538, 523.892, 525.245, 526.599, 527.953,
                    529.306, 530.66, 532.014, 533.368, 534.721, 536.075, 537.429, 538.782, 540.136, 541.49, 542.844,
                    544.197, 545.551, 546.905, 548.259, 549.612, 550.966, 552.32, 553.673, 555.027, 556.381, 557.735,
                    559.088, 560.442, 561.796, 563.15, 564.503, 565.857, 567.211, 568.564, 569.918, 571.272, 572.626,
                    573.979, 575.333, 576.687, 578.041, 579.394, 580.748, 582.102, 583.455, 584.809, 586.163, 587.517,
                    588.87, 590.224, 591.578, 592.931, 594.285, 595.639, 596.993, 598.346, 599.7, 601.054, 602.408,
                    603.761, 605.115, 606.469, 607.822, 609.176, 610.53, 611.884, 613.237, 614.591, 615.945, 617.299,
                    618.652, 620.006, 621.36, 622.713, 624.067, 625.421, 626.775, 628.128, 629.482, 630.836, 632.189,
                    633.543, 634.897, 636.251, 637.604, 638.958, 640.312, 641.666, 643.019, 644.373, 645.727, 647.08,
                    648.434, 649.788, 651.142, 652.495, 653.849, 655.203, 656.557, 657.91, 659.264, 660.618, 661.971,
                    663.325, 664.679, 666.033, 667.386, 668.74, 670.094, 671.448, 672.801, 674.155, 675.509, 676.862,
                    678.216, 679.57, 680.924, 682.277, 683.631, 684.985, 686.338, 687.692, 689.046, 690.4, 691.753 };
            testData2.dPwrSpectrum = new double[] { 0.000591237, 0.00018517, 0.000482605, 0.000462066, 0.000391179,
                    0.000875955, 0.000794783, 0.000247877, 0.000456975, 0.001449517, 0.003207957, 0.002751842,
                    0.001116939, 0.000601191, 0.001946421, 0.003415583, 0.002173666, 0.001002787, 0.001917473,
                    0.002142689, 0.003758895, 0.003187951, 0.005036288, 0.006942663, 0.005018235, 0.000510839,
                    0.003520972, 0.003071154, 0.001643802, 0.001187452, 0.000977769, 0.001620385, 0.001996813,
                    0.002630655, 0.002860775, 0.004292306, 0.006224008, 0.003005601, 0.002579044, 0.002847443,
                    0.004567811, 0.002135979, 0.003063753, 0.006863791, 0.0058867, 0.003150712, 0.003368373,
                    0.003781247, 0.005737126, 0.004389603, 0.001342056, 0.002240119, 0.003083534, 0.00352013,
                    0.002071596, 0.002320871, 0.002945397, 0.001619053, 0.001938475, 0.002402646, 0.005438417,
                    0.005127369, 0.002858986, 0.001832817, 0.004712091, 0.002431321, 0.03198758, 0.04848877, 0.0176878,
                    0.003589498, 0.003360674, 0.002655019, 0.003381546, 0.005219159, 0.006208205, 0.008312704,
                    0.007545516, 0.003471552, 0.002689847, 0.003562469, 0.002455493, 0.002736232, 0.004278838,
                    0.007325241, 0.007964412, 0.007844935, 0.002831767, 0.03969896, 0.1176084, 0.08824246, 0.01188225,
                    0.003755706, 0.01212316, 0.01622813, 0.01115149, 0.005692196, 0.007729039, 0.007058545, 0.005961182,
                    0.004503823, 0.005720692, 0.005126604, 0.001229507, 0.000506316, 0.002018822, 0.001830844,
                    0.00077636, 0.001377472, 0.002075673, 0.00275713, 0.006651841, 0.0181838, 0.01477442, 0.003746935,
                    0.003042642, 0.006781329, 0.005580276, 0.000551431, 0.006593785, 0.00804364, 0.003972783,
                    0.002519061, 0.01103633, 0.01440166, 0.005059134, 0.00247205, 0.001399464, 0.001959002, 0.004975057,
                    0.003893126, 0.0047775, 0.005928043, 0.003900033, 0.004215223, 0.004882889, 0.00479188, 0.003120864,
                    0.002105606, 0.001804197, 0.0019951, 0.003126864, 0.004074258, 0.000701008, 0.003940343,
                    0.004952287, 0.005917205, 0.005999524, 0.004198635, 0.002917017, 0.002825805, 0.002021723,
                    0.002210744, 0.00238656, 0.002028916, 0.002124083, 0.0013556, 0.003324906, 0.004452135, 0.00333742,
                    0.003825936, 0.004568749, 0.001802829, 0.003166026, 0.004832201, 0.003531741, 0.002192885,
                    0.000899273, 0.003851091, 0.001872859, 0.002912082, 0.000545292, 0.004990207, 0.005432846,
                    0.002587487, 0.003618698, 0.00529596, 0.001074188, 0.002484767, 0.003472883, 0.001925257,
                    0.003061345, 0.004100441, 0.001114795, 0.002688581, 0.002074407, 0.003484425, 0.002934865,
                    0.003641129, 0.004088912, 0.01130616, 0.01037408, 0.001565658, 0.001150585, 0.003508745,
                    0.002418244, 0.00314535, 0.004347931, 0.002079501, 0.001970616, 0.002681999, 0.002111398,
                    0.003110484, 0.001835291, 0.000528325, 0.001899196, 0.005334411, 0.006700383, 0.004213858,
                    0.00165239, 0.00152961, 0.003107963, 0.003659486, 0.007682455, 0.001723824, 0.003356601,
                    0.006683025, 0.00878847, 0.003291882, 0.002618011, 0.002804362, 0.002782565, 0.000439741,
                    0.005180187, 0.007924506, 0.002794954, 0.001545545, 0.004194165, 0.003105241, 0.005364905,
                    0.003689751, 0.002700227, 0.001948473, 0.001725612, 0.001833155, 0.004621712, 0.002467365,
                    0.002825867, 0.003085172, 0.006889614, 0.005409792, 0.001448034, 0.002068121, 0.000715061,
                    0.001434427, 0.001204562, 0.00280924, 0.003848752, 0.002738474, 0.003167284, 0.00346381, 0.00287249,
                    0.001159578, 0.001589674, 0.002938344, 0.003183393, 0.002831178, 0.003631899, 0.002687739,
                    0.00152671, 0.001668961, 0.001939201, 0.002490513, 0.00463016, 0.004794936, 0.003242255,
                    0.002389502, 0.005076025, 0.004656854, 0.000472256, 0.003649424, 0.004617757, 0.003221977,
                    0.00062306, 0.001353852, 0.003184889, 0.003007289, 0.001578559, 0.001910817, 0.003532877,
                    0.00085566, 0.003977233, 0.004808818, 0.00348967, 0.002925736, 0.001504834, 0.004218021,
                    0.003873567, 0.001772578, 0.003085776, 0.00238846, 0.002884426, 0.001711541, 0.004619108,
                    0.004524134, 0.003849481, 0.001084904, 0.005238652, 0.007412126, 0.004734781, 0.002502185,
                    0.001725399, 0.001516663, 0.001397613, 0.005843974, 0.006641302, 0.005347747, 0.003294972,
                    0.002806035, 0.002443086, 0.001025728, 0.003831323, 0.004421471, 0.002801217, 0.001352359,
                    0.001879599, 0.002530399, 0.002395308, 0.000783407, 0.00193179, 0.002059979, 0.002387074,
                    0.00392623, 0.002819612, 0.002518717, 0.002005134, 0.003625901, 0.002555156, 0.000897002,
                    0.000817823, 0.003135888, 0.005242849, 0.004516565, 0.003440557, 0.003389585, 0.002737024,
                    0.00110786, 0.000702982, 0.001470319, 0.003113447, 0.001060802, 0.002410515, 0.002865232,
                    0.004836475, 0.003484279, 0.001989779, 0.002630086, 0.002336192, 0.001227433, 0.001143634,
                    0.002913354, 0.006103826, 0.006449271, 0.001465941, 0.00238758, 0.001473103, 0.000529629,
                    0.000754869, 0.000570853, 0.000405334, 0.002015188, 0.001182701, 0.002036056, 0.000577712,
                    0.002747395, 0.003842872, 0.003908014, 0.001605386, 0.003518476, 0.006038724, 0.006550805,
                    0.004996555, 0.001919142, 0.001506551, 0.000897556, 0.001330383, 0.001442295, 0.001203645,
                    0.001417132, 0.00398269, 0.003385875, 0.002160769, 0.003201346, 0.005621848, 0.004635795,
                    0.002814792, 0.003621112, 0.002339891, 0.002026857, 0.002717001, 0.00375438, 0.001983242,
                    0.002618656, 0.004193388, 0.003286339, 0.001743565, 0.002089942, 0.003608219, 0.001055109,
                    0.002021468, 0.002190269, 0.000896813, 0.004051474, 0.004941057, 0.001729017, 0.000758022,
                    0.002005612, 0.002162462, 0.005583812, 0.005801691, 0.003016843, 0.004690902, 0.001700245,
                    0.002467596, 0.00206787, 0.003857307, 0.004050617, 0.008361147, 0.005712147, 0.001569769,
                    0.001099225, 0.002713043, 0.005070214, 0.007101877, 0.004999077, 0.002265898, 0.001062455,
                    0.000509088, 0.001122089, 0.001738682, 0.003938611, 0.003132795, 0.002802565, 0.004754291,
                    0.004289516, 0.004708532, 0.00474955, 0.001543099, 0.002429835, 0.004848988, 0.001633409,
                    0.003188153, 0.00403576, 0.003307876, 0.001981219, 0.001249576, 0.000918696, 0.001443609,
                    0.002045762, 0.000426828, 0.001138223, 0.005080024, 0.004205606, 0.002255191, 0.005208749,
                    0.005359937, 0.002940606, 0.001403108, 0.000958196, 0.000217938, 0.002369583, 0.004747377,
                    0.004961466, 0.003858898, 0.005296628, 0.004466932, 0.003677401, 0.001170743, 0.002100186,
                    0.000593423, 0.000949407, 0.00398853, 0.00242842, 0.002718707, 0.002286816, 0.005281913, 0.00782151,
                    0.002355193, 0.003005615, 0.002812249, 0.001193993, 0.002436477, 0.005956198, 0.005527219,
                    0.002757835, 0.002380057, 0.00205111, 0.001144666, 0.003036737, 0.003540704, 0.002869551,
                    0.001468452, 0.001934062, 0.002874755, 0.004161487, 0.000288923, 0.005435864, 0.005154865,
                    0.004661305, 0.001760373, 0.002271171, 0.004588319, 0.006058869, 0.00400327, 0.002712207,
                    0.005358429, 0.005250184, 0.003941808, 0.005168042, 0.005837011, 0.004909572, 0.00330184,
                    0.001876569 };

            testData3.dFreq = new double[] { 0, 1.352, 2.704, 4.055, 5.407, 6.759, 8.111, 9.463, 10.815, 12.166, 13.518,
                    14.87, 16.222, 17.574, 18.925, 20.277, 21.629, 22.981, 24.333, 25.684, 27.036, 28.388, 29.74,
                    31.092, 32.444, 33.795, 35.147, 36.499, 37.851, 39.203, 40.554, 41.906, 43.258, 44.61, 45.962,
                    47.313, 48.665, 50.017, 51.369, 52.721, 54.073, 55.424, 56.776, 58.128, 59.48, 60.832, 62.183,
                    63.535, 64.887, 66.239, 67.591, 68.943, 70.294, 71.646, 72.998, 74.35, 75.702, 77.053, 78.405,
                    79.757, 81.109, 82.461, 83.812, 85.164, 86.516, 87.868, 89.22, 90.572, 91.923, 93.275, 94.627,
                    95.979, 97.331, 98.682, 100.034, 101.386, 102.738, 104.09, 105.441, 106.793, 108.145, 109.497,
                    110.849, 112.201, 113.552, 114.904, 116.256, 117.608, 118.96, 120.311, 121.663, 123.015, 124.367,
                    125.719, 127.071, 128.422, 129.774, 131.126, 132.478, 133.83, 135.181, 136.533, 137.885, 139.237,
                    140.589, 141.94, 143.292, 144.644, 145.996, 147.348, 148.7, 150.051, 151.403, 152.755, 154.107,
                    155.459, 156.81, 158.162, 159.514, 160.866, 162.218, 163.569, 164.921, 166.273, 167.625, 168.977,
                    170.329, 171.68, 173.032, 174.384, 175.736, 177.088, 178.439, 179.791, 181.143, 182.495, 183.847,
                    185.199, 186.55, 187.902, 189.254, 190.606, 191.958, 193.309, 194.661, 196.013, 197.365, 198.717,
                    200.068, 201.42, 202.772, 204.124, 205.476, 206.828, 208.179, 209.531, 210.883, 212.235, 213.587,
                    214.938, 216.29, 217.642, 218.994, 220.346, 221.698, 223.049, 224.401, 225.753, 227.105, 228.457,
                    229.808, 231.16, 232.512, 233.864, 235.216, 236.567, 237.919, 239.271, 240.623, 241.975, 243.327,
                    244.678, 246.03, 247.382, 248.734, 250.086, 251.437, 252.789, 254.141, 255.493, 256.845, 258.196,
                    259.548, 260.9, 262.252, 263.604, 264.956, 266.307, 267.659, 269.011, 270.363, 271.715, 273.066,
                    274.418, 275.77, 277.122, 278.474, 279.826, 281.177, 282.529, 283.881, 285.233, 286.585, 287.936,
                    289.288, 290.64, 291.992, 293.344, 294.695, 296.047, 297.399, 298.751, 300.103, 301.455, 302.806,
                    304.158, 305.51, 306.862, 308.214, 309.565, 310.917, 312.269, 313.621, 314.973, 316.324, 317.676,
                    319.028, 320.38, 321.732, 323.084, 324.435, 325.787, 327.139, 328.491, 329.843, 331.194, 332.546,
                    333.898, 335.25, 336.602, 337.954, 339.305, 340.657, 342.009, 343.361, 344.713, 346.064, 347.416,
                    348.768, 350.12, 351.472, 352.823, 354.175, 355.527, 356.879, 358.231, 359.583, 360.934, 362.286,
                    363.638, 364.99, 366.342, 367.693, 369.045, 370.397, 371.749, 373.101, 374.452, 375.804, 377.156,
                    378.508, 379.86, 381.212, 382.563, 383.915, 385.267, 386.619, 387.971, 389.322, 390.674, 392.026,
                    393.378, 394.73, 396.082, 397.433, 398.785, 400.137, 401.489, 402.841, 404.192, 405.544, 406.896,
                    408.248, 409.6, 410.951, 412.303, 413.655, 415.007, 416.359, 417.711, 419.062, 420.414, 421.766,
                    423.118, 424.47, 425.821, 427.173, 428.525, 429.877, 431.229, 432.58, 433.932, 435.284, 436.636,
                    437.988, 439.34, 440.691, 442.043, 443.395, 444.747, 446.099, 447.45, 448.802, 450.154, 451.506,
                    452.858, 454.21, 455.561, 456.913, 458.265, 459.617, 460.969, 462.32, 463.672, 465.024, 466.376,
                    467.728, 469.079, 470.431, 471.783, 473.135, 474.487, 475.839, 477.19, 478.542, 479.894, 481.246,
                    482.598, 483.949, 485.301, 486.653, 488.005, 489.357, 490.708, 492.06, 493.412, 494.764, 496.116,
                    497.468, 498.819, 500.171, 501.523, 502.875, 504.227, 505.578, 506.93, 508.282, 509.634, 510.986,
                    512.338, 513.689, 515.041, 516.393, 517.745, 519.097, 520.448, 521.8, 523.152, 524.504, 525.856,
                    527.207, 528.559, 529.911, 531.263, 532.615, 533.967, 535.318, 536.67, 538.022, 539.374, 540.726,
                    542.077, 543.429, 544.781, 546.133, 547.485, 548.836, 550.188, 551.54, 552.892, 554.244, 555.596,
                    556.947, 558.299, 559.651, 561.003, 562.355, 563.706, 565.058, 566.41, 567.762, 569.114, 570.466,
                    571.817, 573.169, 574.521, 575.873, 577.225, 578.576, 579.928, 581.28, 582.632, 583.984, 585.335,
                    586.687, 588.039, 589.391, 590.743, 592.095, 593.446, 594.798, 596.15, 597.502, 598.854, 600.205,
                    601.557, 602.909, 604.261, 605.613, 606.965, 608.316, 609.668, 611.02, 612.372, 613.724, 615.075,
                    616.427, 617.779, 619.131, 620.483, 621.834, 623.186, 624.538, 625.89, 627.242, 628.594, 629.945,
                    631.297, 632.649, 634.001, 635.353, 636.704, 638.056, 639.408, 640.76, 642.112, 643.463, 644.815,
                    646.167, 647.519, 648.871, 650.223, 651.574, 652.926, 654.278, 655.63, 656.982, 658.333, 659.685,
                    661.037, 662.389, 663.741, 665.093, 666.444, 667.796, 669.148, 670.5, 671.852, 673.203, 674.555,
                    675.907, 677.259, 678.611, 679.962, 681.314, 682.666, 684.018, 685.37, 686.722, 688.073, 689.425,
                    690.777 };
            testData3.dPwrSpectrum = new double[] { 0.000821828, 0.000812847, 0.000670345, 0.000400331, 0.000173606,
                    0.000437217, 0.000422056, 0.000668563, 0.000537217, 0.000765327, 0.00109742, 0.000337098,
                    0.001527371, 0.001319626, 0.001642279, 0.002117024, 0.002248, 0.00397963, 0.002522304, 0.003726953,
                    0.005672303, 0.003916343, 0.000670271, 0.001967262, 0.000809437, 0.001594075, 0.001899636,
                    0.003754848, 0.005353548, 0.003109436, 0.003955516, 0.00676988, 0.0110348, 0.01520724, 0.01442252,
                    0.007494949, 0.002142281, 0.004344025, 0.003156265, 0.001617679, 0.002024437, 0.001995508,
                    0.002507385, 0.005655196, 0.004020985, 0.003554387, 0.001513522, 0.001420055, 0.00059238,
                    0.001914895, 0.002810737, 0.002255093, 0.000800989, 0.003502796, 0.003863638, 0.001413374,
                    0.000388027, 0.003338385, 0.002342107, 0.003776032, 0.003747741, 0.004679722, 0.004220449,
                    0.003212099, 0.002502372, 0.002650003, 0.00293148, 0.006223473, 0.003646102, 0.002097741,
                    0.001477414, 0.003758426, 0.002825547, 0.002095335, 0.0043116, 0.005378991, 0.003246397,
                    0.001921418, 0.000496516, 0.003334029, 0.001761741, 0.003879873, 0.002356392, 0.001262192,
                    0.002044213, 0.001501646, 0.003233166, 0.003291358, 0.01901197, 0.01918638, 0.006971002,
                    0.003727415, 0.004601728, 0.002724811, 0.001027764, 0.001576597, 0.002295421, 0.000361283,
                    0.00345141, 0.001953023, 0.002799316, 0.00108628, 0.002894619, 0.002773183, 0.002613007, 0.00353102,
                    0.002285335, 0.002171736, 0.002955879, 0.003095789, 0.001108919, 0.009773361, 0.009564181,
                    0.003297488, 0.004409656, 0.001500647, 0.000805787, 0.002509624, 0.004208758, 0.001092623,
                    0.00274468, 0.002065443, 0.0025093, 0.006420579, 0.005306822, 0.000227891, 0.003081609, 0.003612908,
                    0.004128932, 0.004814786, 0.003818894, 0.003067774, 0.00186187, 0.001244436, 0.000658396,
                    0.001318018, 0.003105901, 0.004501033, 0.003329322, 0.001732746, 0.000510726, 0.001795871,
                    0.003548292, 0.003378792, 0.001870319, 0.00454309, 0.003482857, 0.003713659, 0.003060527,
                    0.002659311, 0.002816897, 0.00210764, 0.001398258, 0.000617682, 0.000481656, 0.002636871,
                    0.004884156, 0.002151278, 0.002995046, 0.003767491, 0.000343256, 0.002774603, 0.000172631,
                    0.002273079, 0.002060948, 0.001947871, 0.002262008, 0.004051295, 0.004192253, 0.003835018,
                    0.003896828, 0.002187656, 0.001633006, 0.003374123, 0.001401064, 0.002987456, 0.007300246,
                    0.005886645, 0.01437867, 0.0147621, 0.001748817, 0.00379085, 0.001818772, 0.002677209, 0.005403954,
                    0.007935518, 0.007141486, 0.003433448, 0.003169723, 0.00807687, 0.009209794, 0.003541702,
                    0.003026749, 0.005358746, 0.003734936, 0.002020428, 0.0050156, 0.006183501, 0.001956363,
                    0.003914777, 0.001446003, 0.004800103, 0.003385457, 0.002261857, 0.003323562, 0.002952857,
                    0.001036444, 0.002382462, 0.002009214, 0.001794669, 0.000315198, 0.001232764, 0.001217552,
                    0.00367307, 0.003313079, 0.001874531, 0.002266295, 0.004379797, 0.003096042, 0.001307285,
                    0.001436631, 0.002877899, 0.002609077, 0.002063639, 0.00245643, 0.002566643, 0.003787203,
                    0.001889422, 0.001845332, 0.000670764, 0.002843593, 0.00063807, 0.002390489, 0.000494931,
                    0.002822365, 0.002127952, 0.002057022, 0.004139222, 0.001587352, 0.002965477, 0.002969439,
                    0.000772842, 0.002135173, 0.00242908, 0.002612973, 0.00206166, 0.004121107, 0.003971857,
                    0.003206664, 0.002135918, 0.004229597, 0.00249468, 0.002568023, 0.005867473, 0.007572062,
                    0.005392509, 0.003157438, 0.001076563, 0.001176607, 0.002270433, 0.001106194, 0.006001687,
                    0.004800934, 0.002284716, 0.004320846, 0.001896045, 0.002119124, 0.002794598, 0.002689335,
                    0.002525199, 0.003952623, 0.004055123, 0.00149944, 0.000879689, 0.003163473, 0.002138921,
                    0.004951835, 0.002955051, 0.000237543, 0.002547703, 0.003434186, 0.003882629, 0.003771367,
                    0.005985157, 0.005946032, 0.003190855, 0.003475901, 0.001509825, 0.001902568, 0.001839188,
                    0.001641699, 0.00302443, 0.001710316, 0.00446478, 0.003068094, 0.002387427, 0.002532348,
                    0.002297009, 0.001709673, 0.001429407, 0.001573125, 0.003438883, 0.003168781, 0.004234915,
                    0.003783345, 0.001617272, 0.002239635, 0.002541282, 0.001643685, 0.003363336, 0.002864711,
                    0.001949267, 0.00174827, 0.000251824, 0.000877372, 0.002192709, 0.004075568, 0.002810318,
                    0.001368123, 0.002667595, 0.003243289, 0.002961201, 0.003808071, 0.004207224, 0.00391994,
                    0.003517297, 0.00217379, 0.004333805, 0.005959071, 0.003480233, 0.003071542, 0.003201329,
                    0.004294278, 0.001967258, 0.001102009, 0.002847338, 0.003348718, 0.000470715, 0.002350386,
                    0.00114612, 0.000832722, 0.000488424, 0.002950303, 0.00384997, 0.004425104, 0.003120095,
                    0.000932603, 0.003368628, 0.005046596, 0.003728615, 0.00339384, 0.001334799, 0.00195933, 0.00201726,
                    0.000685061, 0.002587984, 0.002977642, 0.002278133, 0.002127078, 0.002507656, 0.001338837,
                    0.003043267, 0.001244028, 0.00209637, 0.002414645, 0.002804098, 0.002768698, 0.001942103,
                    0.002336111, 0.003287724, 0.00342101, 0.002241108, 0.001652474, 0.001702325, 0.000693165,
                    0.004320124, 0.002596555, 0.002510713, 0.002934426, 0.000736847, 0.002720308, 0.003706939,
                    0.002978783, 0.001234983, 0.001257145, 0.002363099, 0.001369005, 0.000175905, 0.001730445,
                    0.002214797, 0.001373641, 0.002180444, 0.002179417, 0.000832655, 0.004255419, 0.007421638,
                    0.005328339, 0.003482948, 0.004829966, 0.003956701, 0.002156496, 0.002948069, 0.003228104,
                    0.00190017, 0.002543887, 0.003858527, 0.003573853, 0.003669467, 0.001200069, 0.002456381,
                    0.002896827, 0.001904035, 0.003413969, 0.003915766, 0.00222647, 0.000597024, 0.002917249,
                    0.00347268, 0.001549653, 0.000780234, 0.002625833, 0.002396613, 0.000322008, 0.002645027,
                    0.003387685, 0.002909271, 0.002068658, 0.003078292, 0.003081636, 0.001270353, 0.003317846,
                    0.002654727, 0.002258222, 0.002856353, 0.002623073, 0.000862015, 0.002296816, 0.003682477,
                    0.00093285, 0.001872471, 0.00082033, 0.001192399, 0.002766336, 0.00419267, 0.003107869, 0.001969474,
                    0.001403563, 0.002672425, 0.002083431, 0.000814312, 0.002120344, 0.003004086, 0.00073151,
                    0.001753243, 0.001607139, 0.000691048, 0.004983254, 0.004477261, 0.001954536, 0.00048794,
                    0.003636931, 0.003242302, 0.001544326, 0.000669352, 0.003185218, 0.003674886, 0.001746317,
                    0.002242096, 0.001822797, 0.003425122, 0.005789295, 0.005737311, 0.002210153, 0.002850597,
                    0.001064362, 0.001953295, 0.000542209, 0.001290404, 0.001952269, 0.00216019, 0.002483294,
                    0.001789525, 0.002269282, 0.002773817, 0.00550013, 0.003379264, 0.002148081, 0.001558493,
                    0.000807969, 0.001580293, 0.002640869, 0.003904185, 0.001658646, 0.003318399, 0.003041014,
                    0.000669379, 0.003222015, 0.003233005, 0.0015319, 0.00206952, 0.003797076, 0.002397215, 0.00085185,
                    0.000309006, 0.001902201, 0.002969754, 0.002176763, 0.002062924, 0.00156956, 0.00160781, 0.00243852,
                    0.002118937 };

        } catch (Exception ex) {
            System.out.println("[Exception: fnGetRawDatas] " + ex.getMessage());
        }

        return returnValue;
    }

    // 웹서버로 cause 요청
    void getCause() {

        SendPost sendPost = new SendPost(context, DefConstant.URL_TYPE_GET_CAUSE);

        sendPost.setHandler(handler);
        sendPost.start();
    }

    // 서버에서 전달받은 cause 파싱
    public void parseCause(String jsonString) {

        bResponseCause = true;

        if( jsonString == null || "".equals(jsonString) ) {
            ToastUtil.showShort("failed get cause from server. use in local storage");

            cause = Utils.getStringArrayPref("cause");
            if( cause == null ) {   // 앱 설치 후 최초 실행인 경우 호출됨.
                cause = new String[][]{{"1", "Unbalance", "Static imbalance"}, {"2", "Misalignment", "Parallel (Offset)"}, {"3", "Misalignment", "Angular (Gap)"}, {"4", "Ball Bearing", "Stage three fault: outer race (BPFO)"}, {"5", "Ball Bearing", "Stage three fault: inner race (BPFI)"}, {"6", "Ball Bearing", "Stage three fault: ball damage (BSF)"}, {"7", "Ball Bearing", "Fundamental Train Frequency (FTF)"}, {"8", "Looseness", "Structural looseness"}, {"9", "Looseness", "Rotating looseness"}, {"10", "Resonance", "Resonance"}, {"11", "Bent shaft", "Bent shaft"}, {"12", "Cavitation", "Pump cavitation"}, {"13", "Cocked bearing", "Inner/Outer race cocked on shaft"}, {"14", "Journal bearings", "Wear/Clearance"}, {"15", "Journal bearings", "Oil whirl"}, {"16", "Rotor rub", "Rotor rub"}, {"17", "Hydraulic and aerodynamic", "Blade faults"}, {"18", "Induction motors", "전기적 결함"}, {"19", "Coupling", "Misaligned 3-jaw coupling"}, {"20", "Coupling", "Misaligned 4-jaw coupling"}, {"21", "Coupling", "Locked gearflex coupling"}};
            }
        }
        else {

            try {
                JSONObject jsonOrgObject = new JSONObject(jsonString);
                JSONArray jsonArray = jsonOrgObject.getJSONArray("list");

                String[][] arrayCause = new String[jsonArray.length()][3];

                for (int i = 0; i < jsonArray.length(); i++) {
                    JSONObject jsonObj = jsonArray.getJSONObject(i);

                    String no = jsonObj.getString("no");
                    String cause = jsonObj.getString("cause");
                    String desc = jsonObj.getString("description");

                    arrayCause[i][0] = no;
                    arrayCause[i][1] = cause;
                    arrayCause[i][2] = desc;
                }

                cause = arrayCause;

                bExistCause = true;

            } catch (Exception e) {
                Log.d(TAG, "jsonString : " + jsonString);
                e.printStackTrace();
            }
        }

        Utils.setStringArrayPref("cause", cause);

        final int nRows = cause.length-1;

        if (nRows > 0)  // 헤더 제외 row 수
        {
            causeInfos = new DIAGNOSIS_CAUSES_Type();
            causeInfos.nCount = nRows;
            causeInfos.infos = new CAUSE_INFO_Type[nRows];

            for (int i = 0; i < nRows; i++)
            {
                causeInfos.infos[i] = new CAUSE_INFO_Type();
//                causeInfos.infos[i].nNo = (int)(Double.parseDouble(cause[i + 1][0]));
//                causeInfos.infos[i].strCause = cause[i + 1][1];
//                causeInfos.infos[i].strDesc = cause[i + 1][2];
                causeInfos.infos[i].nNo = (int)(Double.parseDouble(cause[i][0]));
                causeInfos.infos[i].strCause = cause[i][1];
                causeInfos.infos[i].strDesc = cause[i][2];
//                causeInfos.infos[i].nNo = (int)(Double.parseDouble(cause[0][i]));
//                causeInfos.infos[i].strCause = cause[1][i];
//                causeInfos.infos[i].strDesc = cause[2][i];
            }
        }

        checkDataSet();
    }

    // 웹서버로 feature 요청
    void getFeature() {

        SendPost sendPost = new SendPost(context, DefConstant.URL_TYPE_GET_FEATURE);

        sendPost.setHandler(handler);
        sendPost.start();
    }


    // 서버에서 전달받은 feature 파싱
    public void parseFeature(String jsonString) {

        bResponseFeature = true;

        if( jsonString == null || "".equals(jsonString) ) {
            ToastUtil.showShort("failed get feature from server. use in local storage");

            feature = Utils.getStringArrayPref("feature");
            if( feature == null ) {   // 앱 설치 후 최초 실행인 경우 호출됨.
                feature = new String[][]{{"-1", "1", "0", "1.07", "-0.050001", "-0.050001", "-0.050001", "-0.050001", "-0.050001", "-0.050001", "-0.050001", "-0.050001", "-0.050001", "-0.050001", "-0.050001", "-0.050001", "-0.050001", "-0.050001", "0", "-0.050001", "-0.050001", "-0.050001", "-0.050001", "-0.050001", "0" },
                        {"-1", "1", "0", "0.5", "0.9", "0.46", "0.2", "0.2", "-0.0500002", "-0.0500002", "-0.0500002", "-0.0500002", "-0.0500002", "-0.0500002", "-0.0500002", "-0.0500002", "-0.0500002", "-0.0500002", "0", "-0.0500002", "-0.0500002", "-0.0500002", "-0.0500002", "-0.0500002", "0" },
                        {"1.004", "-1", "0", "0.7", "0.3", "0.7", "-0.051", "-0.051", "-0.051", "-0.051", "-0.051", "-0.051", "-0.051", "-0.051", "-0.051", "-0.051", "-0.051", "-0.051", "0", "-0.051", "-0.051", "-0.051", "-0.051", "-0.051", "0" },
                        {"-0.071", "-0.071", "0", "-0.051", "-0.051", "-0.051", "-0.051", "-0.051", "-0.051", "-0.051", "-0.051", "-0.051", "1", "-0.051", "-0.051", "-0.051", "-0.051", "-0.051", "0", "-0.051", "-0.051", "-0.051", "-0.051", "-0.051", "0" },
                        {"-0.071002", "-0.071002", "0", "-0.051002", "-0.051002", "-0.051002", "-0.051002", "-0.051002", "-0.051002", "-0.051002", "-0.051002", "-0.051002", "-0.051002", "1", "-0.051002", "-0.051002", "-0.051002", "-0.051002", "0", "-0.051002", "-0.051002", "-0.051002", "-0.051002", "-0.051002", "0" },
                        {"-0.065003", "-0.065003", "0", "-0.05003", "-0.05003", "-0.05003", "-0.05003", "-0.05003", "-0.05003", "-0.05003", "-0.05003", "-0.05003", "-0.05003", "-0.05003", "1", "-0.05003", "-0.05003", "-0.05003", "0", "-0.05003", "-0.05003", "-0.05003", "-0.05003", "-0.05003", "0" },
                        {"-0.070004", "-0.070004", "0", "-0.050004", "-0.050004", "-0.050004", "-0.050004", "-0.050004", "-0.050004", "-0.050004", "-0.050004", "-0.050004", "-0.050004", "-0.050004", "-0.050004", "1", "-0.050004", "-0.050004", "0", "-0.050004", "-0.050004", "-0.050004", "-0.050004", "-0.050004", "0" },
                        {"0", "0", "0.7", "0.7", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "-0.050021", "-0.050021", "-0.050021", "0" },
                        {"-1", "1", "0", "0.75", "0.45", "0.45", "0.45", "0.45", "0.45", "0.45", "0.45", "0.45", "0", "0", "0", "0", "0", "10", "0", "0.5", "0.1", "-0.050021", "-0.050021", "-0.050021", "0" },
                        {"0", "0", "0", "0.7", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0" },
                        {"1", "-0.10008", "0", "0.698", "0.41", "-0.3", "-0.10008", "-0.10008", "-0.10008", "-0.10008", "-0.10008", "-0.10008", "-0.10008", "-0.10008", "-0.10008", "-0.10008", "-0.10008", "-0.10008", "0", "-0.10008", "-0.10008", "-0.10008", "-0.10008", "-0.10008", "0" },
                        {"-0.00009", "-0.00009", "0", "0.39997", "-0.00009", "-0.00009", "-0.00009", "-0.00009", "-0.00009", "-0.00009", "-0.00009", "-0.00009", "-0.00009", "-0.00009", "-0.00009", "-0.00009", "1", "0", "10", "-0.00009", "-0.00009", "-0.00009", "-0.00009", "-0.00009", "0" },
                        {"0.5", "-0.5005", "0", "0.5", "0.8", "0.5", "-0.01001", "-0.01001", "-0.01001", "-0.01001", "-0.01001", "-0.01001", "-0.01001", "-0.01001", "-0.01001", "-0.01001", "-0.01001", "-0.01001", "0", "-0.01001", "-0.01001", "-0.01001", "-0.01001", "-0.01001", "0" },
                        {"-0.5001", "-0.5001", "0", "0.299995", "0.3", "0.3", "-0.010002", "-0.010002", "-0.010002", "-0.010002", "-0.010002", "-0.010002", "-0.010002", "-0.010002", "-0.010002", "-0.010002", "-0.010002", "20", "0", "-0.010002", "-0.010002", "-0.010002", "-0.010002", "-0.010002", "0" },
                        {"-0.0002", "-0.0002", "0", "-0.0002", "-0.0002", "-0.0002", "-0.0002", "-0.0002", "-0.0002", "-0.0002", "-0.0002", "-0.0002", "-0.0002", "-0.0002", "-0.0002", "-0.0002", "-0.0002", "-0.0002", "0", "-0.0002", "-0.0002", "1", "-0.0002", "-0.0002", "0" },
                        {"-0.05200003", "1", "0", "0.7", "0.44", "0.45", "0.45", "0.45", "0.45", "0.45", "0.45", "0.45", "0", "0", "0", "0", "0", "50", "0", "0.4", "0.3", "-0.050021", "-0.050021", "-0.050021", "0" },
                        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1.2", "0", "0", "0", "0", "0", "0", "0", "0" },
                        {"-1", "-1", "0", "-0.1", "-0.1", "-0.1", "-0.1", "-0.1", "-0.1", "-0.1", "-0.1", "-0.1", "-0.1", "-0.1", "-0.1", "-0.1", "-0.1", "-0.1", "0", "-0.1", "-0.1", "-0.1", "1.2", "1.2", "0" },
                        {"1", "-0.5", "0", "0", "0", "0.8", "-0.0110002", "-0.0110002", "0.4", "-0.0110002", "0.4", "-0.0110002", "-0.0110002", "-0.0110002", "-0.0110002", "-0.0110002", "-0.0110002", "-0.0110002", "0", "-0.0110002", "-0.0110002", "-0.0110002", "-0.0110002", "-0.0110002", "0" },
                        {"-0.0120008", "-0.0120008", "0", "0", "0", "0", "0.7", "-0.0120008", "-0.0120008", "0.4", "-0.0120008", "0.4", "-0.0120008", "-0.0120008", "-0.0120008", "-0.0120008", "-0.0120008", "-0.0120008", "0", "-0.0120008", "-0.0120008", "-0.0120008", "-0.0120008", "-0.0120008", "0" },
                        {"1", "-0.5", "0", "0", "0", "0.9", "-0.1005", "-0.1005", "-0.1005", "-0.1005", "-0.1005", "-0.1005", "-0.1005", "-0.1005", "-0.1005", "-0.1005", "-0.1005", "-0.1005", "0", "-0.1005", "-0.1005", "-0.1005", "-0.1005", "-0.1005", "0" }};
            }
        }
        else {
            try {
                JSONObject jsonOrgObject = new JSONObject(jsonString);
                JSONArray jsonArray = jsonOrgObject.getJSONArray("list");

                String[][] arrayFeature = new String[jsonArray.length()][25];

                for (int i = 0; i < jsonArray.length(); i++) {
                    JSONObject jsonObj = jsonArray.getJSONObject(i);

                    String f1 = jsonObj.getString("f1");
                    String f2 = jsonObj.getString("f2");
                    String f2_2 = jsonObj.getString("f2-2");
                    String f3 = jsonObj.getString("f3");
                    String f4 = jsonObj.getString("f4");
                    String f5 = jsonObj.getString("f5");
                    String f6 = jsonObj.getString("f6");
                    String f7 = jsonObj.getString("f7");
                    String f8 = jsonObj.getString("f8");
                    String f9 = jsonObj.getString("f9");
                    String f10 = jsonObj.getString("f10");
                    String f11 = jsonObj.getString("f11");
                    String f12 = jsonObj.getString("f12");
                    String f13 = jsonObj.getString("f13");
                    String f14 = jsonObj.getString("f14");
                    String f15 = jsonObj.getString("f15");
                    String f16 = jsonObj.getString("f16");
                    String f17 = jsonObj.getString("f17");
                    String f17_2 = jsonObj.getString("f17-2");
                    String f18 = jsonObj.getString("f18");
                    String f19 = jsonObj.getString("f19");
                    String f20 = jsonObj.getString("f20");
                    String f21 = jsonObj.getString("f21");
                    String f22 = jsonObj.getString("f22");
                    String f23 = jsonObj.getString("f23");

                    arrayFeature[i][0] = f1;
                    arrayFeature[i][1] = f2;
                    arrayFeature[i][2] = f2_2;
                    arrayFeature[i][3] = f3;
                    arrayFeature[i][4] = f4;
                    arrayFeature[i][5] = f5;
                    arrayFeature[i][6] = f6;
                    arrayFeature[i][7] = f7;
                    arrayFeature[i][8] = f8;
                    arrayFeature[i][9] = f9;
                    arrayFeature[i][10] = f10;
                    arrayFeature[i][11] = f11;
                    arrayFeature[i][12] = f12;
                    arrayFeature[i][13] = f13;
                    arrayFeature[i][14] = f14;
                    arrayFeature[i][15] = f15;
                    arrayFeature[i][16] = f16;
                    arrayFeature[i][17] = f17;
                    arrayFeature[i][18] = f17_2;
                    arrayFeature[i][19] = f18;
                    arrayFeature[i][20] = f19;
                    arrayFeature[i][21] = f20;
                    arrayFeature[i][22] = f21;
                    arrayFeature[i][23] = f22;
                    arrayFeature[i][24] = f23;
                }

                feature = arrayFeature;

                bExistFeature = true;

            } catch (Exception e) {
                Log.d(TAG, "jsonString : " + jsonString);
                e.printStackTrace();
            }
        }

        Utils.setStringArrayPref("feature", feature);

        final int nRows = feature.length-1;
        int nFeatureCols = feature[0].length-1;

        featureInfos = new DIAGNOSIS_FEATURES_Type();
        featureInfos.nCount = nRows;
        featureInfos.infos = new FEATURE_INFO_Type[nRows];

        for (int i = 0; i < nRows; i++)
        {
            featureInfos.infos[i] = new FEATURE_INFO_Type();
            featureInfos.infos[i].fValues = new float[nFeatureCols - 1];
            featureInfos.infos[i].nCauseNo = i + 1;
            for (int j = 0; j < nFeatureCols - 1; j++) // 첫번째 컬럼(C1, C2, ... C21) 제외
            {
                try {
                    featureInfos.infos[i].fValues[j] = Float.parseFloat(feature[i+1][j+1]);
                    // System.out.println("i: " + i + ", j : " + j + " : " + xlFeature[i+1 ][j+1 ]);
                }
                catch (Exception e) {
                    //System.out.println("i: " + i + ", j : " + j);
                }
            }
        }

        checkDataSet();
    }

    // feature, cause값이 세팅이 되었는지 확인
    boolean checkDataSet() {
        if( bResponseCause && bResponseFeature ) {
            ((PresetListActivity)context).makeMatrix2();
        }

        return false;
    }
}